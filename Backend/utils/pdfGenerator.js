const fs = require("fs");
const { PDFDocument, StandardFonts, rgb } = require("pdf-lib");
const path = require("path");

async function generatePDF(data) {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595, 842]); // A4 Size

  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

  const drawText = (text, x, y, size = 10, bold = false) => {
    page.drawText(text, {
      x,
      y,
      size,
      font: bold ? fontBold : font,
      color: rgb(0, 0, 0),
    });
  };

  // === 1. Draw Header Image ===
  const headerImageBytes = fs.readFileSync(
    path.join(__dirname, "../assets/logo.png")
  );
  const headerImage = await pdfDoc.embedPng(headerImageBytes);
  page.drawImage(headerImage, {
    x: 20,
    y: 680,
    width: 550,
    height: 120,
  });

  // === 2. Table Layout ===
  const startX = 30;
  const startY = 620;
  const tableWidth = 530;
  const rowHeight = 25;

  const columns = [
    { label: "Description", width: 260 },
    { label: "Quantity", width: 70 },
    { label: "Unit Price", width: 100 },
    { label: "Total", width: 100 },
  ];

  const items = [
    {
      description: "Web Development Service",
      quantity: "1",
      unitPrice: "100,000",
      total: "100,000",
    },
    {
      description: "UI/UX Design",
      quantity: "1",
      unitPrice: "35,000",
      total: "35,000",
    },
    {
      description: "Domain & Hosting (1 year)",
      quantity: "1",
      unitPrice: "20,000",
      total: "20,000",
    },
  ];

  const totalAmount = "155,000";

  // === 3. Draw Table Header ===
  let currentY = startY;
  let currentX = startX;
  columns.forEach((col) => {
    drawText(col.label, currentX + 3, currentY - 15, 10, true);
    currentX += col.width;
  });

  // Horizontal line after header
  page.drawLine({
    start: { x: startX, y: currentY - rowHeight },
    end: { x: startX + tableWidth, y: currentY - rowHeight },
    thickness: 1,
    color: rgb(0, 0, 0),
  });

  // === 4. Draw Rows ===
  currentY -= rowHeight;
  items.forEach((item) => {
    currentX = startX;
    drawText(item.description, currentX + 3, currentY - 15);
    currentX += columns[0].width;
    drawText(item.quantity, currentX + 3, currentY - 15);
    currentX += columns[1].width;
    drawText(item.unitPrice, currentX + 3, currentY - 15);
    currentX += columns[2].width;
    drawText(item.total, currentX + 3, currentY - 15);
    currentY -= rowHeight;

    // Horizontal line after each row
    page.drawLine({
      start: { x: startX, y: currentY },
      end: { x: startX + tableWidth, y: currentY },
      thickness: 1,
      color: rgb(0, 0, 0),
    });
  });

  // === 5. Draw Total Row ===
  drawText("Total", startX + columns[0].width + columns[1].width + 3, currentY - 15, 10, true);
  drawText(totalAmount, startX + columns[0].width + columns[1].width + columns[2].width + 3, currentY - 15, 10, true);
  currentY -= rowHeight;

  // === 6. Note & Terms ===
  drawText("Note:", startX, currentY - 30, 10, true);
  drawText("Please make the payment within 30 days.", startX, currentY - 45);

  drawText("Terms & Conditions:", startX, currentY - 70, 10, true);
  drawText("All goods sold are non-refundable.", startX, currentY - 85);

  // === 7. Footer / Author Info ===
  drawText("Generated by: Thusitha Gayan", 50, 100);
  drawText("University: Uva Wellassa University, Sri Lanka", 50, 85);
  drawText("Field: ICT Undergraduate", 50, 70);

  drawText("Your Business Name", 50, 50);
  drawText("5 Martin Pl, Sydney NSW", 50, 40);
  drawText("+61 2000 0000", 250, 40);
  drawText("yourbusinessname.com.au", 350, 40);
  drawText("email@yourbusinessname.com.au", 350, 30);

  const pdfBytes = await pdfDoc.save();
  return pdfBytes;
}

module.exports = { generatePDF };
